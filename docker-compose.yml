version: '3.9'

services:
  db:
    image: postgres:16-alpine
    container_name: vpn_bot_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-vpn_bot}
      POSTGRES_USER: ${POSTGRES_USER:-vpn_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-vpn_pass}
    volumes:
      - pg_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-vpn_user} -d $${POSTGRES_DB:-vpn_bot}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
    restart: unless-stopped

  api:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: vpn_bot_api
    env_file:
      - ./.env
    environment:
      - DATABASE_URL=postgresql+asyncpg://vpn_user:vpn_pass@db:5432/vpn_bot
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    command: bash -lc "bash /app/scripts/boot.sh api"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  bot:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: vpn_bot_worker
    env_file:
      - ./.env
    environment:
      - DATABASE_URL=postgresql+asyncpg://vpn_user:vpn_pass@db:5432/vpn_bot
    depends_on:
      db:
        condition: service_healthy
    command: bash -lc "bash /app/scripts/boot.sh bot"
    restart: unless-stopped

  caddy:
    image: caddy:2.8-alpine
    container_name: vpn_bot_caddy
    restart: unless-stopped
    env_file:
      - ./.env
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      api:
        condition: service_started

volumes:
  pg_data:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local

