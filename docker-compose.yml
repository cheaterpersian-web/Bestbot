version: '3.9'

services:
  db:
    image: mysql:8.0
    container_name: vpn_bot_mysql
    command: ["mysqld", "--default-authentication-plugin=mysql_native_password", "--character-set-server=utf8mb4", "--collation-server=utf8mb4_unicode_ci"]
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE:-vpn_bot}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-rootpass}
      MYSQL_ROOT_HOST: "%"
    volumes:
      - db_data:/var/lib/mysql
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -h 127.0.0.1 -uroot -p$${MYSQL_ROOT_PASSWORD:-rootpass} --silent || mysqladmin ping -h 127.0.0.1 -uroot --password='' --silent || mysqladmin ping -h 127.0.0.1 --silent || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 12
      start_period: 60s
    restart: unless-stopped

  api:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: vpn_bot_api
    env_file:
      - ./.env
    environment:
      DATABASE_URL: mysql+aiomysql://root:@db:3306/${MYSQL_DATABASE:-vpn_bot}
    depends_on:
      db:
        condition: service_healthy
    ports:
      - "8000:8000"
    command: bash -lc "bash /app/scripts/boot.sh api"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  bot:
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: vpn_bot_worker
    env_file:
      - ./.env
    environment:
      DATABASE_URL: mysql+aiomysql://root:@db:3306/${MYSQL_DATABASE:-vpn_bot}
    depends_on:
      db:
        condition: service_healthy
    command: bash -lc "bash /app/scripts/boot.sh bot"
    restart: unless-stopped

  caddy:
    image: caddy:2.8-alpine
    container_name: vpn_bot_caddy
    restart: unless-stopped
    env_file:
      - ./.env
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      api:
        condition: service_started

volumes:
  db_data:
    driver: local
  caddy_data:
    driver: local
  caddy_config:
    driver: local

